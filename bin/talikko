#!/usr/bin/env gosh

;; FreeBSD ports tool


(use gauche.process)
(use gauche.parseopt)
(use gauche.collection)
(use file.util)
(use util.match)
(use util.list) ; slices
(use text.csv)
(use kirjasto.komento.tyÃ¶kalu)
(use kirjasto.merkkijono)
(use clojure.fs)
(require-extension (srfi 1 11 13))

(use talikko.vÃ¤ri)
(use talikko.commands)
(use talikko.env)





; install {{{
(define (install-package package)
  (with-cwd (build-path ports-directory package)
            (print (concat (colour-string colour-symbol ":: ")
                           (colour-string colour-message "Installing ")
                           (colour-string colour-package package)))
            (run-command-sudo '(make clean))
            (run-command-sudo '(make config-recursive))
            (colour-command "sudo make install clean"
                            #/^(===>  )Patching (.*$)/   "[38;5;99m *[0m Applying patch \\2"
                            #/^===>/   "[38;5;39m>>>[0m"
                            #/^=>/   "[38;5;99m>>>[0m"
                            #/\*\*\*.*$/    "[38;5;3m\\0[0m")))
; }}}

; deinstall {{{
(define (deinstall-package package)
  (current-directory (build-path ports-directory package))
  (print (concat  (colour-string colour-symbol ":: ")
                  (colour-string colour-message "Deinstalling ")
                  (colour-string colour-package package)))
  (colour-command "sudo make deinstall"
                  #/^(===>  )Patching (.*$)/   "[38;5;99m *[0m Applying patch \\2"
                  #/^===>/   "[38;5;39m>>>[0m"
                  #/\*\*\*.*$/    "[38;5;3m\\0[0m"))

; }}}

; reinstall {{{
(define (reinstall-package package)
  (current-directory (build-path ports-directory package))
  (print (string-append (colour-string colour-symbol ":: ")
                        (colour-string colour-message "Reinstalling ")
                        (colour-string colour-package package)))
  (run-command-sudo '(make clean))
  (run-command-sudo '(make config))
  (colour-command "sudo make"
                  #/^(===>  )Patching (.*$)/   "[38;5;99m *[0m Applying patch \\2"
                  #/^===>/   "[38;5;39m>>>[0m"
                  #/^=>/   "[38;5;99m>>>[0m"
                  #/\*\*\*.*$/    "[38;5;3m\\0[0m")
  (deinstall-package package)
  (colour-command "sudo make install clean"
                  #/^(===>  )Patching (.*$)/   "[38;5;99m *[0m Applying patch \\2"
                  #/^===>/   "[38;5;39m>>>[0m"
                  #/^=>/   "[38;5;99m>>>[0m"
                  #/\*\*\*.*$/    "[38;5;3m\\0[0m"))
; }}}

; search {{{

(define (search-find-package package)
  (let ((index-list
          (call-with-input-file
            (build-path ports-directory
                        index-file)
            (cut port->list
              (make-csv-reader #\|) <>))))
    (filter (^x (let ((x (map (^s (string-downcase s))
                              x)))
                  (or (string-scan (car x) package)
                    (string-scan (cadr x) package)
                    (string-scan (cadddr x) package))))
            index-list)))

(define (fetch-index-file)
  (when (not (file-exists? index-file))
    (print (string-append (colour-string colour-symbol ":: ")
                          (colour-string colour-message "Fetching INDEX file")))
    (with-cwd ports-directory
              (run-command-sudo '(make fetchindex)))))

(define (search-package-by-name package)
  (fetch-index-file)
  (print (string-append (colour-string colour-symbol ":: ")
                        (colour-string colour-message "Searching ")
                        (colour-string colour-package package)))
  (let1 found-list (search-find-package package)
    (for-each
      (lambda (x)
        (let ((package-name
                ; remove "/usr/ports/" from string
                (string-split
                  (string-drop (cadr x) 11)
                  #\/))
              (version
                (last (string-split
                        (car x)
                        #\-))))
          (let-values (((category name)
                        (values
                          (car package-name)
                          (cadr package-name))))
            (display
              (string-concatenate
                `(" "
                  ,(colour-string colour-package-category
                                  category)
                  "/"
                  ,(colour-string colour-package
                                  name))))
            (print
              (concat " [" (colour-string colour-package-version version) "]"))
            (print
              (concat `("    " ,(colour-string 244  (cadddr x))))))))
      found-list)))

; }}}

(define (usage status)
  (exit status "usage: ~a <command> <package-name>\n" "talikko"))

(define (runner args)
  (let-args (cdr args)
    ((search "S|search=s")
     (#f "h|help" (usage 0))
     . rest)
    (cond
      (search
        (search-package-by-name search))
      (else
        (match (car rest)
          ; commands
          ("info"
           (info (cadr rest)))
          ((or "update" "up")
           (update))
          ("install"
           (install-package (cadr rest)))
          ((or "deinstall" "remove")
           (deinstall-package (cadr rest)))
          ("reinstall"
           (reinstall-package (cadr rest)))
          ("search"
           (search-package-by-name (cadr rest)))
          ("srcup"
           (update-source-tree))
          (_ (usage 1))))))
  0)

(define (main args)
  (runner args))

; vim: filetype=scheme

